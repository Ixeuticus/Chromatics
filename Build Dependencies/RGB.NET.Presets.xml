<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RGB.NET.Presets</name>
    </assembly>
    <members>
        <member name="T:RGB.NET.Presets.Decorators.FlashDecorator">
            <inheritdoc cref="T:RGB.NET.Core.AbstractUpdateAwareDecorator" />
            <inheritdoc cref="T:RGB.NET.Core.IBrushDecorator" />
            <summary>
            Represents a decorator which allows to flash a brush by modifying his opacity.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.FlashDecorator.Attack">
            <summary>
            Gets or sets the attack-time (in seconds) of the decorator. (default: 0.2)<br />
            This is close to a synthesizer envelope. (See <see href="http://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope" />  as reference)
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.FlashDecorator.Decay">
            <summary>
            Gets or sets the decay-time (in seconds) of the decorator. (default: 0)<br />
            This is close to a synthesizer envelope. (See <see href="http://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope" /> as reference)
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.FlashDecorator.Sustain">
            <summary>
            Gets or sets the sustain-time (in seconds) of the decorator. (default: 0.3)<br />
            This is close to a synthesizer envelope. (See <see href="http://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope" /> as reference)<br />
            Note that this value for naming reasons represents the time NOT the level.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.FlashDecorator.Release">
            <summary>
            Gets or sets the release-time (in seconds) of the decorator. (default: 0.2)<br />
            This is close to a synthesizer envelope. (See <see href="http://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope" /> as reference)
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.FlashDecorator.AttackValue">
            <summary>
            Gets or sets the level to which the oppacity (percentage) should raise in the attack-cycle. (default: 1);
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.FlashDecorator.SustainValue">
            <summary>
            Gets or sets the level at which the oppacity (percentage) should stay in the sustain-cycle. (default: 1);
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.FlashDecorator.PauseValue">
            <summary>
            Gets or sets the level at which the oppacity (percentage) should stay in the pause-cycle. (default: 0);
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.FlashDecorator.Interval">
            <summary>
            Gets or sets the interval (in seconds) in which the decorator should repeat (if repetition is enabled). (default: 1)
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.FlashDecorator.Repetitions">
            <summary>
            Gets or sets the amount of repetitions the decorator should do until it's finished. Zero means infinite. (default: 0)
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Decorators.FlashDecorator.#ctor(RGB.NET.Core.RGBSurface,System.Boolean)">
            <summary>
            Creates a new <see cref="T:RGB.NET.Presets.Decorators.FlashDecorator"/> from the specified xml.
            </summary>
            <param name="surface">The surface this decorator belongs to.</param>
            <param name="updateIfDisabled">A value indicating if the decorator should be updated if it is disabled.</param>
        </member>
        <member name="M:RGB.NET.Presets.Decorators.FlashDecorator.ManipulateColor(RGB.NET.Core.Rectangle@,RGB.NET.Core.RenderTarget@,RGB.NET.Core.Color@)">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Decorators.FlashDecorator.Update(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Decorators.FlashDecorator.OnAttached(RGB.NET.Core.IDecoratable)">
            <inheritdoc cref="M:RGB.NET.Core.AbstractUpdateAwareDecorator.OnAttached(RGB.NET.Core.IDecoratable)" />
            <inheritdoc cref="M:RGB.NET.Core.IDecorator.OnAttached(RGB.NET.Core.IDecoratable)" />
        </member>
        <member name="T:RGB.NET.Presets.Decorators.IGradientDecorator">
            <inheritdoc />
            <summary>
            Represents a basic decorator decorating a <see cref="T:RGB.NET.Presets.Gradients.IGradient" />.
            </summary>
        </member>
        <member name="T:RGB.NET.Presets.Decorators.MoveGradientDecorator">
            <inheritdoc cref="T:RGB.NET.Core.AbstractUpdateAwareDecorator" />
            <inheritdoc cref="T:RGB.NET.Presets.Decorators.IGradientDecorator" />
            <summary>
            Represents a decorator which allows to move an <see cref="T:RGB.NET.Presets.Gradients.IGradient" /> by modifying his offset.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.MoveGradientDecorator.Direction">
            <summary>
            Gets or sets the direction the <see cref="T:RGB.NET.Presets.Textures.Gradients.IGradient"/> is moved.
            True leads to an offset-increment (normaly moving to the right), false to an offset-decrement (normaly moving to the left).
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Decorators.MoveGradientDecorator.Speed">
            <summary>
            Gets or sets the speed of the movement in units per second.
            The meaning of units differs for the different <see cref="T:RGB.NET.Presets.Textures.Gradients.IGradient"/>, but 360 units will always be one complete cycle:
              <see cref="T:RGB.NET.Presets.Textures.Gradients.LinearGradient"/>: 360 unit = 1 offset.
              <see cref="T:RGB.NET.Presets.Textures.Gradients.RainbowGradient"/>: 1 unit = 1 degree.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Decorators.MoveGradientDecorator.#ctor(RGB.NET.Core.RGBSurface,System.Single,System.Boolean)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Decorators.MoveGradientDecorator" /> class.
            </summary>
            <param name="surface">The surface this decorator belongs to.</param>
            <param name="speed">The speed of the movement in units per second.
            The meaning of units differs for the different <see cref="T:RGB.NET.Presets.Gradients.IGradient" />  but 360 units will always be one complete cycle:
              <see cref="T:RGB.NET.Presets.Gradients.LinearGradient" />: 360 unit = 1 offset.
              <see cref="T:RGB.NET.Presets.Gradients.RainbowGradient" />: 1 unit = 1 degree.</param>
            <param name="direction">The direction the <see cref="T:RGB.NET.Presets.Gradients.IGradient" /> is moved.
            True leads to an offset-increment (normaly moving to the right), false to an offset-decrement (normaly moving to the left).</param>
        </member>
        <member name="M:RGB.NET.Presets.Decorators.MoveGradientDecorator.Update(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:RGB.NET.Presets.Groups.RectangleLedGroup">
            <inheritdoc />
            <summary>
            Represents a <see cref="T:RGB.NET.Presets.Groups.RectangleLedGroup" /> containing <see cref="T:RGB.NET.Core.Led" /> which physically lay inside a <see cref="T:RGB.NET.Core.Rectangle" />.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Groups.RectangleLedGroup.Rectangle">
            <summary>
            Gets or sets the <see cref="T:RGB.NET.Core.Rectangle"/> the <see cref="T:RGB.NET.Core.Led"/>  should be taken from.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Groups.RectangleLedGroup.MinOverlayPercentage">
            <summary>
            Gets or sets the minimal percentage overlay a <see cref="T:RGB.NET.Core.Led"/>  must have with the <see cref="T:RGB.NET.Core.Rectangle" /> to be taken into the <see cref="T:RGB.NET.Presets.Groups.RectangleLedGroup"/>.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Groups.RectangleLedGroup.#ctor(RGB.NET.Core.RGBSurface,RGB.NET.Core.Led,RGB.NET.Core.Led,System.Double)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Groups.RectangleLedGroup" /> class.
            </summary>
            <param name="surface">Specifies the surface to attach this group to or <c>null</c> if the group should not be attached on creation.</param>
            <param name="fromLed">They first <see cref="T:RGB.NET.Core.Led" />  to calculate the <see cref="T:RGB.NET.Core.Rectangle" /> of this <see cref="T:RGB.NET.Groups.RectangleLedGroup" /> from.</param>
            <param name="toLed">They second <see cref="T:RGB.NET.Core.Led" />  to calculate the <see cref="T:RGB.NET.Core.Rectangle" /> of this <see cref="T:RGB.NET.Groups.RectangleLedGroup" /> from.</param>
            <param name="minOverlayPercentage">(optional) The minimal percentage overlay a <see cref="T:RGB.NET.Core.Led" />  must have with the <see cref="P:RGB.NET.Groups.RectangleLedGroup.Rectangle" /> to be taken into the <see cref="T:RGB.NET.Groups.RectangleLedGroup" />. (default: 0.5)</param>
        </member>
        <member name="M:RGB.NET.Presets.Groups.RectangleLedGroup.#ctor(RGB.NET.Core.RGBSurface,RGB.NET.Core.Point,RGB.NET.Core.Point,System.Double)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Groups.RectangleLedGroup" /> class.
            </summary>
            <param name="surface">Specifies the surface to attach this group to or <c>null</c> if the group should not be attached on creation.</param>
            <param name="fromPoint">They first point to calculate the <see cref="T:RGB.NET.Core.Rectangle" /> of this <see cref="T:RGB.NET.Groups.RectangleLedGroup" /> from.</param>
            <param name="toPoint">They second point to calculate the <see cref="T:RGB.NET.Core.Rectangle" /> of this <see cref="T:RGB.NET.Groups.RectangleLedGroup" /> from.</param>
            <param name="minOverlayPercentage">(optional) The minimal percentage overlay a <see cref="T:RGB.NET.Core.Led" />  must have with the <see cref="P:RGB.NET.Groups.RectangleLedGroup.Rectangle" /> to be taken into the <see cref="T:RGB.NET.Groups.RectangleLedGroup" />. (default: 0.5)</param>
        </member>
        <member name="M:RGB.NET.Presets.Groups.RectangleLedGroup.#ctor(RGB.NET.Core.RGBSurface,RGB.NET.Core.Rectangle,System.Double)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Groups.RectangleLedGroup" /> class.
            </summary>
            <param name="surface">Specifies the surface to attach this group to or <c>null</c> if the group should not be attached on creation.</param>
            <param name="rectangle">The <see cref="T:RGB.NET.Core.Rectangle" /> of this <see cref="T:RGB.NET.Groups.RectangleLedGroup" />.</param>
            <param name="minOverlayPercentage">(optional) The minimal percentage overlay a <see cref="T:RGB.NET.Core.Led" />  must have with the <see cref="P:RGB.NET.Groups.RectangleLedGroup.Rectangle" /> to be taken into the <see cref="T:RGB.NET.Groups.RectangleLedGroup" />. (default: 0.5)</param>
        </member>
        <member name="M:RGB.NET.Presets.Groups.RectangleLedGroup.OnAttach">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Groups.RectangleLedGroup.OnDetach">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Groups.RectangleLedGroup.GetLeds">
            <inheritdoc />
            <summary>
            Gets a list containing all <see cref="T:RGB.NET.Core.Led" /> of this <see cref="T:RGB.NET.Presets.Groups.RectangleLedGroup" />.
            </summary>
            <returns>The list containing all <see cref="T:RGB.NET.Core.Led" /> of this <see cref="T:RGB.NET.Presets.Groups.RectangleLedGroup" />.</returns>
        </member>
        <member name="M:RGB.NET.Presets.Groups.RectangleLedGroup.ToList">
            <inheritdoc />
            <summary>
            Gets a list containing all <see cref="T:RGB.NET.Core.Led" /> of this <see cref="T:RGB.NET.Presets.Groups.RectangleLedGroup" />.
            </summary>
            <returns>The list containing all <see cref="T:RGB.NET.Core.Led" /> of this <see cref="T:RGB.NET.Presets.Groups.RectangleLedGroup" />.</returns>
        </member>
        <member name="T:RGB.NET.Presets.Helper.GradientHelper">
            <summary>
            Offers some extensions and helper-methods for gradient related things.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Helper.GradientHelper.CalculateLinearGradientOffset(RGB.NET.Core.Point@,RGB.NET.Core.Point@,RGB.NET.Core.Point@)">
            <summary>
            Calculates the offset of an specified <see cref="T:RGB.NET.Core.Point"/> on an gradient.
            </summary>
            <param name="startPoint">The start <see cref="T:RGB.NET.Core.Point"/> of the gradient.</param>
            <param name="endPoint">The end <see cref="T:RGB.NET.Core.Point"/> of the gradient.</param>
            <param name="point">The <see cref="T:RGB.NET.Core.Point"/> on the gradient to which the offset is calculated.</param>
            <returns>The offset of the <see cref="T:RGB.NET.Core.Point"/> on the gradient.</returns>
        </member>
        <member name="M:RGB.NET.Presets.Helper.GradientHelper.CalculateDistance(RGB.NET.Core.Point@,RGB.NET.Core.Point@,RGB.NET.Core.Point@)">
            <summary>
            Returns the signed magnitude of a <see cref="T:RGB.NET.Core.Point"/> on a vector.
            </summary>
            <param name="point">The <see cref="T:RGB.NET.Core.Point"/> on the vector of which the magnitude should be calculated.</param>
            <param name="origin">The origin of the vector.</param>
            <param name="direction">The direction of the vector.</param>
            <returns>The signed magnitude of a <see cref="T:RGB.NET.Core.Point"/> on a vector.</returns>
        </member>
        <member name="M:RGB.NET.Presets.Helper.GradientHelper.CalculateDistance(RGB.NET.Core.Point@,RGB.NET.Core.Point@)">
            <summary>
            Calculated the distance between two <see cref="T:RGB.NET.Core.Point"/>.
            </summary>
            <param name="point1">The first <see cref="T:RGB.NET.Core.Point"/>.</param>
            <param name="point2">The second <see cref="T:RGB.NET.Core.Point"/>.</param>
            <returns>The distance between the two <see cref="T:RGB.NET.Core.Point"/>.</returns>
        </member>
        <member name="T:RGB.NET.Presets.Textures.AbstractGradientTexture">
            <inheritdoc cref="T:RGB.NET.Core.AbstractBindable" />
            <inheritdoc cref="T:RGB.NET.Core.ITexture" />
            <summary>
            Represents a abstract texture containing a color-gradient.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.AbstractGradientTexture.Gradient">
            <summary>
            Gets the gradient used to generate this texture.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.AbstractGradientTexture.Size">
            <inheritdoc />
        </member>
        <member name="P:RGB.NET.Presets.Textures.AbstractGradientTexture.Item(RGB.NET.Core.Point@)">
            <inheritdoc />
        </member>
        <member name="P:RGB.NET.Presets.Textures.AbstractGradientTexture.Item(RGB.NET.Core.Rectangle@)">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Textures.AbstractGradientTexture.#ctor(RGB.NET.Core.Size,RGB.NET.Presets.Textures.Gradients.IGradient)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.AbstractGradientTexture" /> class.
            </summary>
            <param name="size">The size of the texture.</param>
            <param name="gradient">The gradient used to generate this texture.</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.AbstractGradientTexture.GetColor(RGB.NET.Core.Point@)">
            <summary>
            Gets the color at the specified location of the texture.
            </summary>
            <param name="point">The location to get the color from.</param>
            <returns>The color at the specified location.</returns>
        </member>
        <member name="T:RGB.NET.Presets.Textures.BytePixelTexture">
            <inheritdoc  />
            <summary>
            Represents a texture of byte-data pixels.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.BytePixelTexture.Data">
            <inheritdoc />
        </member>
        <member name="P:RGB.NET.Presets.Textures.BytePixelTexture.ColorFormat">
            <summary>
            Gets the color format the data is in.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.BytePixelTexture.#ctor(System.Int32,System.Int32,System.Byte[],RGB.NET.Presets.Textures.ColorFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.BytePixelTexture" /> class.
            A <see cref="T:RGB.NET.Core.AverageColorSampler"/> is used.
            </summary>
            <param name="with">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="data">The pixel-data of the texture.</param>
            <param name="colorFormat">The color format the data is in. (default: RGB)</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.BytePixelTexture.#ctor(System.Int32,System.Int32,System.Byte[],RGB.NET.Core.ISampler{System.Byte},RGB.NET.Presets.Textures.ColorFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.BytePixelTexture" /> class.
            </summary>
            <param name="with">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="data">The pixel-data of the texture.</param>
            <param name="sampler">The sampler used to get the color of a region.</param>
            <param name="colorFormat">The color format the data is in. (default: RGB)</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.BytePixelTexture.GetColor(System.ReadOnlySpan{System.Byte}@)">
            <inheritdoc />
        </member>
        <member name="T:RGB.NET.Presets.Textures.ConicalGradientTexture">
            <inheritdoc />
            <summary>
            Represents a texture drawing a conical gradient.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.ConicalGradientTexture.Origin">
            <summary>
            Gets or sets the origin (radian-angle) this <see cref="T:RGB.NET.Presets.Textures.ConicalGradientTexture"/> is drawn to. (default: -π/2)
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.ConicalGradientTexture.Center">
            <summary>
            Gets or sets the center <see cref="T:RGB.NET.Core.Point"/> (as percentage in the range [0..1]) of the <see cref="T:RGB.NET.Presets.Textures.Gradients.IGradient"/> drawn by this <see cref="T:RGB.NET.Presets.Textures.ConicalGradientTexture"/>. (default: 0.5, 0.5)
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.ConicalGradientTexture.#ctor(RGB.NET.Core.Size,RGB.NET.Presets.Textures.Gradients.IGradient)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.ConicalGradientTexture" /> class.
            </summary>
            <param name="size">The size of the texture.</param>
            <param name="gradient">The <see cref="T:RGB.NET.Presets.Gradients.IGradient" /> drawn by this <see cref="T:RGB.NET.Presets.Textures.ConicalGradientTexture" />.</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.ConicalGradientTexture.#ctor(RGB.NET.Core.Size,RGB.NET.Presets.Textures.Gradients.IGradient,RGB.NET.Core.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.ConicalGradientTexture" /> class.
            </summary>
            <param name="size">The size of the texture.</param>
            <param name="gradient">The <see cref="T:RGB.NET.Presets.Gradients.IGradient" /> drawn by this <see cref="T:RGB.NET.Presets.Textures.ConicalGradientTexture" />.</param>
            <param name="center">The center <see cref="T:RGB.NET.Core.Point" /> (as percentage in the range [0..1]).</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.ConicalGradientTexture.#ctor(RGB.NET.Core.Size,RGB.NET.Presets.Textures.Gradients.IGradient,RGB.NET.Core.Point,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.ConicalGradientTexture" /> class.
            </summary>
            <param name="size">The size of the texture.</param>
            <param name="gradient">The <see cref="T:RGB.NET.Presets.Gradients.IGradient" /> drawn by this <see cref="T:RGB.NET.Presets.Textures.ConicalGradientTexture" />.</param>
            <param name="center">The center <see cref="T:RGB.NET.Core.Point" /> (as percentage in the range [0..1]).</param>
            <param name="origin">The origin (radian-angle) the gradient is drawn to.</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.ConicalGradientTexture.GetColor(RGB.NET.Core.Point@)">
            <inheritdoc />
        </member>
        <member name="T:RGB.NET.Presets.Textures.ColorFormat">
            <summary>
            Contains a list of possible color formats.
            </summary>
        </member>
        <member name="T:RGB.NET.Presets.Textures.FloatPixelTexture">
            <inheritdoc  />
            <summary>
            Represents a texture of float-data pixels.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.FloatPixelTexture.Data">
            <inheritdoc />
        </member>
        <member name="P:RGB.NET.Presets.Textures.FloatPixelTexture.ColorFormat">
            <summary>
            Gets the color format the data is in.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.FloatPixelTexture.#ctor(System.Int32,System.Int32,System.Single[],RGB.NET.Presets.Textures.ColorFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.FloatPixelTexture" /> class.
            A <see cref="T:RGB.NET.Core.AverageColorSampler"/> is used.
            </summary>
            <param name="with">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="data">The pixel-data of the texture.</param>
            <param name="colorFormat">The color format the data is in. (default: RGB)</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.FloatPixelTexture.#ctor(System.Int32,System.Int32,System.Single[],RGB.NET.Core.ISampler{System.Single},RGB.NET.Presets.Textures.ColorFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.FloatPixelTexture" /> class.
            </summary>
            <param name="with">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="data">The pixel-data of the texture.</param>
            <param name="sampler">The sampler used to get the color of a region.</param>
            <param name="colorFormat">The color format the data is in. (default: RGB)</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.FloatPixelTexture.GetColor(System.ReadOnlySpan{System.Single}@)">
            <inheritdoc />
        </member>
        <member name="T:RGB.NET.Presets.Textures.Gradients.AbstractGradient">
            <inheritdoc cref="T:RGB.NET.Core.AbstractDecoratable`1" />
            <inheritdoc cref="T:RGB.NET.Presets.Textures.Gradients.IGradient" />
            <summary>
            Represents a basic gradient.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.Gradients.AbstractGradient.GradientStops">
            <summary>
            Gets a list of the stops used by this <see cref="T:RGB.NET.Presets.Textures.Gradients.AbstractGradient"/>.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.Gradients.AbstractGradient.WrapGradient">
            <summary>
            Gets or sets if the Gradient wraps around if there isn't a second stop to take.
            Example: There is a stop at offset 0.0, 0.5 and 0.75. 
            Without wrapping offset 1.0 will be calculated the same as 0.75; with wrapping it would be the same as 0.0.
            </summary>
        </member>
        <member name="E:RGB.NET.Presets.Textures.Gradients.AbstractGradient.GradientChanged">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.AbstractGradient.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.Gradients.AbstractGradient"/> class.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.AbstractGradient.#ctor(RGB.NET.Presets.Textures.Gradients.GradientStop[])">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.Gradients.AbstractGradient"/> class.
            </summary>
            <param name="gradientStops">The stops with which the gradient should be initialized.</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.AbstractGradient.#ctor(System.Boolean,RGB.NET.Presets.Textures.Gradients.GradientStop[])">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.Gradients.AbstractGradient"/> class.
            </summary>
            <param name="wrapGradient">Specifies whether the gradient should wrapp or not (see <see cref="P:RGB.NET.Presets.Textures.Gradients.AbstractGradient.WrapGradient"/> for an example of what this means).</param>
            <param name="gradientStops">The stops with which the gradient should be initialized.</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.AbstractGradient.ClipOffset(System.Single)">
            <summary>
            Clips the offset and ensures, that it is inside the bounds of the stop list.
            </summary>
            <param name="offset">The offset to clip.</param>
            <returns>The clipped offset.</returns>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.AbstractGradient.GetColor(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.AbstractGradient.Move(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.AbstractGradient.OnGradientChanged">
            <summary>
            Should be called to indicate that the gradient was changed.
            </summary>
        </member>
        <member name="T:RGB.NET.Presets.Textures.Gradients.GradientStop">
            <summary>
            Represents a stop on a gradient.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.Gradients.GradientStop.Offset">
            <summary>
            Gets or sets the percentage offset to place this <see cref="T:RGB.NET.Presets.Textures.Gradients.GradientStop"/>. This should be inside the range of [0..1] but it's not necessary.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.Gradients.GradientStop.Color">
            <summary>
            Gets or sets the <see cref="P:RGB.NET.Presets.Textures.Gradients.GradientStop.Color"/> of this <see cref="T:RGB.NET.Presets.Textures.Gradients.GradientStop"/>.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.GradientStop.#ctor(System.Single,RGB.NET.Core.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.Gradients.GradientStop"/> class.
            </summary>
            <param name="offset">The percentage offset to place this <see cref="T:RGB.NET.Presets.Textures.Gradients.GradientStop"/>.</param>
            <param name="color">The <see cref="P:RGB.NET.Presets.Textures.Gradients.GradientStop.Color"/> of the <see cref="T:RGB.NET.Presets.Textures.Gradients.GradientStop"/>.</param>
        </member>
        <member name="T:RGB.NET.Presets.Textures.Gradients.IGradient">
            <summary>
            Represents a basic gradient.
            </summary>
        </member>
        <member name="E:RGB.NET.Presets.Textures.Gradients.IGradient.GradientChanged">
            <summary>
            Occurs if the <see cref="T:RGB.NET.Presets.Textures.Gradients.IGradient"/> is changed.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.IGradient.GetColor(System.Single)">
            <summary>
            Gets the <see cref="T:RGB.NET.Core.Color"/> of the <see cref="T:RGB.NET.Presets.Textures.Gradients.IGradient"/> on the specified offset.
            </summary>
            <param name="offset">The percentage offset to take the <see cref="T:RGB.NET.Core.Color"/> from.</param>
            <returns>The <see cref="T:RGB.NET.Core.Color"/> at the specific offset.</returns>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.IGradient.Move(System.Single)">
            <summary>
            Moves the <see cref="T:RGB.NET.Presets.Textures.Gradients.IGradient"/> by the provided offset.
            </summary>
            <param name="offset">The offset the <see cref="T:RGB.NET.Presets.Textures.Gradients.IGradient"/> should be moved.</param>
        </member>
        <member name="T:RGB.NET.Presets.Textures.Gradients.LinearGradient">
            <inheritdoc />
            <summary>
            Represents a linear interpolated gradient with n stops.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.LinearGradient.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.Gradients.LinearGradient" /> class.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.LinearGradient.#ctor(RGB.NET.Presets.Textures.Gradients.GradientStop[])">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.Gradients.LinearGradient" /> class.
            </summary>
            <param name="gradientStops">The stops with which the gradient should be initialized.</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.LinearGradient.#ctor(System.Boolean,RGB.NET.Presets.Textures.Gradients.GradientStop[])">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.Gradients.AbstractGradient" /> class.
            </summary>
            <param name="wrapGradient">Specifies whether the gradient should wrapp or not (see <see cref="P:RGB.NET.Presets.Textures.Gradients.AbstractGradient.WrapGradient" /> for an example of what this means).</param>
            <param name="gradientStops">The stops with which the gradient should be initialized.</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.LinearGradient.GetColor(System.Single)">
            <inheritdoc />
            <summary>
            Gets the linear interpolated <see cref="T:RGB.NET.Core.Color" /> at the specified offset.
            </summary>
            <param name="offset">The percentage offset to take the color from.</param>
            <returns>The <see cref="T:RGB.NET.Core.Color" /> at the specific offset.</returns>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.LinearGradient.GetEnclosingGradientStops(System.Single,System.Collections.Generic.LinkedList{RGB.NET.Presets.Textures.Gradients.GradientStop},System.Boolean)">
            <summary>
            Get the two <see cref="T:RGB.NET.Presets.Textures.Gradients.GradientStop"/>s encapsulating the specified offset.
            </summary>
            <param name="offset">The reference offset.</param>
            <param name="orderedStops">The ordered list of <see cref="T:RGB.NET.Presets.Textures.Gradients.GradientStop"/> to choose from.</param>
            <param name="wrap">Bool indicating if the gradient should be wrapped or not.</param>
            <returns>The two <see cref="T:RGB.NET.Presets.Textures.Gradients.GradientStop"/>s encapsulating the specified offset.</returns>
        </member>
        <member name="T:RGB.NET.Presets.Textures.Gradients.RainbowGradient">
            <inheritdoc cref="T:RGB.NET.Core.AbstractDecoratable`1" />
            <inheritdoc cref="T:RGB.NET.Presets.Textures.Gradients.IGradient" />
            <summary>
            Represents a rainbow gradient which circles through all colors of the HUE-color-space.<br />
            See <see href="http://upload.wikimedia.org/wikipedia/commons/a/ad/HueScale.svg" /> as reference.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.Gradients.RainbowGradient.StartHue">
            <summary>
            Gets or sets the hue (in degrees) to start from.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.Gradients.RainbowGradient.EndHue">
            <summary>
            Gets or sets the hue (in degrees) to end the with.
            </summary>
        </member>
        <member name="E:RGB.NET.Presets.Textures.Gradients.RainbowGradient.GradientChanged">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.RainbowGradient.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.Gradients.RainbowGradient"/> class.
            </summary>
            <param name="startHue">The hue (in degrees) to start from (default: 0)</param>
            <param name="endHue">The hue (in degrees) to end with (default: 360)</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.RainbowGradient.GetColor(System.Single)">
            <inheritdoc />
            <summary>
            Gets the color on the rainbow at the specified offset.
            </summary>
            <param name="offset">The percentage offset to take the color from.</param>
            <returns>The color at the specific offset.</returns>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.RainbowGradient.Move(System.Single)">
            <inheritdoc />
        </member>
        <member name="M:RGB.NET.Presets.Textures.Gradients.RainbowGradient.OnGradientChanged">
            <summary>
            Should be called to indicate that the gradient was changed.
            </summary>
        </member>
        <member name="T:RGB.NET.Presets.Textures.LinearGradientTexture">
            <inheritdoc />
            <summary>
            Represents a texture drawing a linear gradient.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.LinearGradientTexture.StartPoint">
            <summary>
            Gets or sets the start <see cref="T:RGB.NET.Core.Point"/> (as percentage in the range [0..1]) of the <see cref="T:RGB.NET.Presets.Textures.Gradients.IGradient"/> drawn by this <see cref="T:RGB.NET.Presets.Textures.LinearGradientTexture"/>. (default: 0.0, 0.5)
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.LinearGradientTexture.EndPoint">
            <summary>
            Gets or sets the end <see cref="T:RGB.NET.Core.Point"/>  (as percentage in the range [0..1]) of the <see cref="T:RGB.NET.Presets.Textures.Gradients.IGradient"/> drawn by this <see cref="T:RGB.NET.Presets.Textures.LinearGradientTexture"/>. (default: 1.0, 0.5)
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.LinearGradientTexture.#ctor(RGB.NET.Core.Size,RGB.NET.Presets.Textures.Gradients.IGradient)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.LinearGradientTexture" /> class.
            </summary>
            <param name="size">The size of the texture.</param>
            <param name="gradient">The <see cref="T:RGB.NET.Presets.Gradients.IGradient" /> drawn by this <see cref="T:RGB.NET.Presets.Textures.LinearGradientTexture" />.</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.LinearGradientTexture.#ctor(RGB.NET.Core.Size,RGB.NET.Presets.Textures.Gradients.IGradient,RGB.NET.Core.Point,RGB.NET.Core.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.LinearGradientTexture" /> class.
            </summary>
            <param name="size">The size of the texture.</param>
            <param name="gradient">The <see cref="T:RGB.NET.Presets.Gradients.IGradient" /> drawn by this <see cref="T:RGB.NET.Presets.Textures.LinearGradientTexture" />.</param>
            <param name="startPoint">The start <see cref="T:RGB.NET.Core.Point" /> (as percentage in the range [0..1]).</param>
            <param name="endPoint">The end <see cref="T:RGB.NET.Core.Point" /> (as percentage in the range [0..1]).</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.LinearGradientTexture.GetColor(RGB.NET.Core.Point@)">
            <inheritdoc />
        </member>
        <member name="T:RGB.NET.Presets.Textures.RadialGradientTexture">
            <inheritdoc />
            <summary>
            Represents a texture drawing a radial gradient around a center point.
            </summary>
        </member>
        <member name="P:RGB.NET.Presets.Textures.RadialGradientTexture.Center">
            <summary>
            Gets or sets the center <see cref="T:RGB.NET.Core.Point"/> (as percentage in the range [0..1]) around which the <see cref="T:RGB.NET.Presets.Textures.RadialGradientTexture"/> should be drawn. (default: 0.5, 0.5)
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.RadialGradientTexture.#ctor(RGB.NET.Core.Size,RGB.NET.Presets.Textures.Gradients.IGradient)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.RadialGradientTexture" /> class.
            </summary>
            <param name="size">The size of the texture.</param>
            <param name="gradient">The gradient drawn by the brush.</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.RadialGradientTexture.#ctor(RGB.NET.Core.Size,RGB.NET.Presets.Textures.Gradients.IGradient,RGB.NET.Core.Point)">
            <summary>
            Initializes a new instance of the <see cref="T:RGB.NET.Presets.Textures.RadialGradientTexture" /> class.
            </summary>
            <param name="size">The size of the texture.</param>
            <param name="gradient">The gradient drawn by the brush.</param>
            <param name="center">The center point (as percentage in the range [0..1]).</param>
        </member>
        <member name="M:RGB.NET.Presets.Textures.RadialGradientTexture.GetColor(RGB.NET.Core.Point@)">
            <inheritdoc />
        </member>
        <member name="T:RGB.NET.Presets.Textures.Sampler.AverageByteSampler">
            <summary>
            Represents a sampled that averages multiple byte-data entries.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Sampler.AverageByteSampler.Sample(RGB.NET.Core.SamplerInfo{System.Byte}@,System.Span{System.Byte}@)">
            <inheritdoc />
        </member>
        <member name="T:RGB.NET.Presets.Textures.Sampler.AverageFloatSampler">
            <summary>
            Represents a sampled that averages multiple float-data entries.
            </summary>
        </member>
        <member name="M:RGB.NET.Presets.Textures.Sampler.AverageFloatSampler.Sample(RGB.NET.Core.SamplerInfo{System.Single}@,System.Span{System.Single}@)">
            <inheritdoc />
        </member>
    </members>
</doc>
